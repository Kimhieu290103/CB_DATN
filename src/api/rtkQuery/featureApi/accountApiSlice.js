import { apiSlice } from "../apiSlice";

export const studentApiSlice = apiSlice.injectEndpoints({
    endpoints: (builder) => ({
        getAllStudents: builder.query({
            query: ({ page = 0, limit = 10 }) =>
                `/api/v1/users/students?page=${page}&limit=${limit}`,
            providesTags: ['Students'],
        }),
        getAllLcd: builder.query({
            query: ({ page = 0, limit = 10 }) =>
                `/api/v1/users/lcdlist?page=${page}&limit=${limit}`,
            providesTags: ['Lcd'],
        }),
        getAllOtherAccount: builder.query({
            query: () =>
                `/api/v1/users/exclude-sv-lcd`,
            providesTags: ['OtherAccount'],
        }),
        registerStudent: builder.mutation({
            query: (studentData) => ({
                url: `/api/v1/users/register`,
                method: 'POST',
                body: studentData,
            }),
            invalidatesTags: ['Students'], // C·∫≠p nh·∫≠t danh s√°ch sinh vi√™n sau khi ƒëƒÉng k√Ω
        }),
        bulkRegisterStudents: builder.mutation({
            query: (formData) => ({
                url: `/api/v1/users/add-student-exel`,
                method: 'POST',
                body: formData,
                formData: true, // Cho ph√©p multipart/form-data
            }),
            invalidatesTags: ['Students'],
        }),
        // Endpoint t√¨m ki·∫øm sinh vi√™n
        searchStudents: builder.query({
            query: ({ search, page = 0, size = 10 }) =>
                `/api/v1/users/search/student?search=${search}&page=${page}&size=${size}`,
            providesTags: ['Students'],
        }),


         // üëá Th√™m m·ªõi: API l·∫•y th√¥ng tin t√†i kho·∫£n
         getUserInfo: builder.query({
            query: () => `/api/v1/users/info`,
        }),
        changePassword: builder.mutation({
            query: (credentials) => ({
                url: `/api/v1/users/change-password`,
                method: 'POST',
                body: credentials, // { oldPassword: '...', newPassword: '...' }
            }),
        }),

        updateProfile: builder.mutation({
            query: ({ id, ...profileData }) => ({ // Nh·∫≠n ID v√† ph·∫ßn c√≤n l·∫°i c·ªßa d·ªØ li·ªáu profile
                url: `/api/v1/users/profile/${id}`, // S·ª≠ d·ª•ng ID trong URL
                method: 'PUT', // Th∆∞·ªùng d√πng PUT ho·∫∑c PATCH ƒë·ªÉ c·∫≠p nh·∫≠t
                body: profileData,
            }),
            invalidatesTags: ['Students'],
        }),


        deactivateUser: builder.mutation({ // Th√™m mutation deactivateUser
            query: (userId) => ({
              url: `/api/v1/users/deactivate/${userId}`,
              method: 'PUT', // Ho·∫∑c c√≥ th·ªÉ l√† POST t√πy theo API c·ªßa b·∫°n
            }),
            invalidatesTags: ['Students', 'Lcd', 'OtherAccount'], // Invalidate c√°c tags li√™n quan
          }),
        
    }),
});

export const {
    useGetAllStudentsQuery,
    useGetAllLcdQuery,
    useGetAllOtherAccountQuery,
    useRegisterStudentMutation,
    useBulkRegisterStudentsMutation,
    useSearchStudentsQuery,
    useGetUserInfoQuery,
    useChangePasswordMutation,
    useUpdateProfileMutation,
    useDeactivateUserMutation, 
} = studentApiSlice;
